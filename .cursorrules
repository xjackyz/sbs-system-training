# SBS System 项目代码规范指南

## 1. 文件组织规范

### 1.1 目录结构
- app/: 应用程序主要代码
- config/: 配置文件
- data/: 数据文件
- docs/: 文档
- logs/: 日志文件
- models/: 模型相关代码
- prompts/: 提示词模板
- scripts/: 工具脚本
- src/: 源代码
- tests/: 测试代码

### 1.2 文件命名
- 使用小写字母
- 单词之间使用下划线连接
- 描述性命名，表明文件用途
- 测试文件以 test_ 开头

## 2. 代码风格规范

### 2.1 Python 代码规范
- 遵循 PEP 8 规范
- 使用 4 空格缩进
- 最大行长度限制为 120 字符
- 类名使用 CamelCase
- 函数和变量名使用 snake_case
- 常量使用大写字母

### 2.2 文档规范
- 所有函数必须包含文档字符串
- 文档字符串使用中文
- 关键函数需要包含参数说明和返回值说明
- 复杂逻辑需要添加行内注释

### 2.3 导入规范
- 标准库导入在最前
- 第三方库导入其次
- 本地模块导入最后
- 每组导入之间空一行

## 3. 编码实践

### 3.1 错误处理
- 使用 try-except 进行异常处理
- 捕获具体的异常类型
- 记录错误日志
- 优雅地处理错误情况

### 3.2 日志规范
- 使用标准的 logging 模块
- 合理使用日志级别
- 包含时间戳和上下文信息
- 敏感信息不写入日志

### 3.3 配置管理
- 配置信息存放在 config/ 目录
- 使用环境变量管理敏感信息
- 配置文件使用 YAML 或 JSON 格式
- 不同环境使用不同配置文件

### 3.4 测试规范
- 单元测试覆盖主要功能
- 测试文件结构mirror源代码结构
- 使用 pytest 框架
- 测试用例命名清晰明确

## 4. 版本控制

### 4.1 Git 规范
- 提交信息使用中文
- 提交信息需要清晰描述改动
- 每个提交专注于单一功能或修复
- 保持提交粒度合适

### 4.2 分支管理
- main: 主分支，保持稳定
- develop: 开发分支
- feature/*: 功能分支
- bugfix/*: 修复分支

## 5. 安全规范

### 5.1 数据安全
- 敏感数据加密存储
- API密钥等凭证使用环境变量
- 定期备份重要数据
- 访问控制和权限管理

### 5.2 代码安全
- 输入验证和清理
- 防止SQL注入
- 使用安全的依赖版本
- 定期更新依赖包

## 6. 性能优化

### 6.1 代码优化
- 避免重复计算
- 合理使用缓存
- 注意内存使用
- 优化循环和算法

### 6.2 资源管理
- 及时释放资源
- 使用上下文管理器
- 控制并发数量
- 监控资源使用

## 7. 协作规范

### 7.1 代码审查
- 提交前自查
- 遵循代码审查清单
- 及时响应审查意见
- 保持代码质量

### 7.2 文档维护
- 及时更新文档
- 保持文档与代码同步
- 文档使用markdown格式
- 包含必要的示例 